" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.

set nocompatible                  " Must come first because it changes other options.

filetype off 
" Pathogen
silent! call pathogen#runtime_append_all_bundles()
silent! call pathogen#infect() 
silent! call pathogen#helptags()

set encoding=utf-8 " for powerline? 
filetype plugin indent on         " Turn on file type detection.
syntax enable                     " Turn on syntax highlighting.
set ofu=syntaxcomplete#Complete   " Omni completion
set t_Co=256

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Leader mappings
let mapleader = ","
let g:mapleader = ","

" Ack mapping
let g:ackprg="ack-grep -H --nocolor --nogroup --column"

" Tab mappings
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

map <leader>f :Tabularize/
map <leader>mc :CoffeeCompile<CR>
map <leader>mC :CoffeeCompile watch vertical<CR>
map <leader>mm :make<CR><CR>

" Split window
nmap <leader>swh  :topleft  vnew<CR>
nmap <leader>swl :botright vnew<CR>
nmap <leader>swk    :topleft  new<CR>
nmap <leader>swj  :botright new<CR>
" Split buffer
nmap <leader>sh   :leftabove  vnew<CR>
nmap <leader>sl  :rightbelow vnew<CR>
nmap <leader>sk     :leftabove  new<CR>
nmap <leader>sj   :rightbelow new<CR>

" Save file
nmap <leader>w :w!<cr>

" auto format XML with xmllint
map <leader>fx :silent 1,$!xmllint --format --recover - 2>/dev/null<cr>

" clear highlighting
nmap <space> <space>:noh<cr>
" spelling
nmap <silent> <leader>s :set spell!<cr>
set spelllang=en_au

" disable automatic folding
set nofoldenable

" Ruby
autocmd FileType ruby setlocal foldmethod=syntax
autocmd FileType ruby set omnifunc=rubycomplete#Complete
" Javascript
autocmd FileType javascript setlocal foldmethod=syntax shiftwidth=4 tabstop=4
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript set makeprg=jslint\ %
autocmd FileType javascript set efm=%-P%f,
             \%E%>\ #%n\ %m,%Z%.%#Line\ %l\\,\ Pos\ %c,
             \%-G%f\ is\ OK.,%-Q
" Coffescript
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
autocmd BufWritePost *.coffee silent CoffeeMake! -b | cwindow | redraw!
" Python
autocmd FileType python setlocal foldmethod=indent shiftwidth=4 tabstop=4
autocmd FileType python set makeprg=pylint\ --reports=n\ --output-format=parseable\ %:p|cwindow
autocmd FileType python set errorformat=%f:%l:\ %m,%-G%.%#
autocmd FileType python set omnifunc=pythoncomplete#Complete
" HTML/CSS
autocmd FileType css setlocal foldmethod=indent shiftwidth=2 tabstop=2
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" Data files
autocmd BufNewFile,BufRead *.json set ft=javascript
" Text
autocmd BufNewFile,BufRead *.md,*.markdown setlocal spell 

" let g:SuperTabDefaultCompletionType = "context"
" set completeopt=menuone,longest,preview
highlight Pmenu ctermbg=238 gui=bold

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
autocmd BufNewFile,BufRead *_spec.rb compiler rspec

" Formatting for things like Cucumber tables
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

let coffee_compiler = '/usr/local/bin/coffee'

let Tlist_Ctags_Cmd = "ctags"
let Tlist_WinWidth = 50
map <Leader>l :TlistToggle<cr>
set tags=./tags;
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Light and dark color switching
colorscheme slate
nnoremap <silent> <Leader>cc :exec "color " . ((g:colors_name == "slate") ? "morning" : "slate")<CR>

" get out of editing mode
inoremap jj <Esc> 
inoremap jw <Esc>:w <CR>

" drop to shell
map <Leader>ss :shell<CR>

set pastetoggle=<Leader>pp 
set showmode

" stop vim from highlighting really long lines == SLOW
set synmaxcol=200
map <Leader>8 :match ErrorMsg '\%>80v.\+'<CR>

" run ruby scripts from in vim
set autowrite
map <leader>mr :!ruby %<cr>

map <Leader>nm :set number!<cr>
